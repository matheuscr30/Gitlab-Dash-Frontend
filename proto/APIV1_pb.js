/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.GITLAB_DASH_API.Branch', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.BranchList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.Commit', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.CommitList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.Group', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.GroupList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.Issue', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.IssueList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.MergeRequest', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.MergeRequestList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.Project', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.ProjectList', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.User', null, global);
goog.exportSymbol('proto.GITLAB_DASH_API.UserList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.Project.displayName = 'proto.GITLAB_DASH_API.Project';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nameWithNamespace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    defaultBranch: jspb.Message.getFieldWithDefault(msg, 5, ""),
    visibility: jspb.Message.getFieldWithDefault(msg, 6, ""),
    webUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.Project;
  return proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameWithNamespace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultBranch(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisibility(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNameWithNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDefaultBranch();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVisibility();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.Project.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Project.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name_with_namespace = 3;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getNameWithNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setNameWithNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string default_branch = 5;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getDefaultBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setDefaultBranch = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string visibility = 6;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getVisibility = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setVisibility = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string web_url = 7;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setWebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string avatar_url = 8;
 * @return {string}
 */
proto.GITLAB_DASH_API.Project.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Project.prototype.setAvatarUrl = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.Project.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.Project.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GITLAB_DASH_API.Project.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Project.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.ProjectList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.ProjectList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.ProjectList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.ProjectList.displayName = 'proto.GITLAB_DASH_API.ProjectList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.ProjectList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.ProjectList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.ProjectList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.ProjectList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.ProjectList.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectsList: jspb.Message.toObjectList(msg.getProjectsList(),
    proto.GITLAB_DASH_API.Project.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.ProjectList}
 */
proto.GITLAB_DASH_API.ProjectList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.ProjectList;
  return proto.GITLAB_DASH_API.ProjectList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.ProjectList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.ProjectList}
 */
proto.GITLAB_DASH_API.ProjectList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.Project;
      reader.readMessage(value,proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader);
      msg.addProjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.ProjectList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.ProjectList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.ProjectList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.ProjectList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.Project.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Project projects = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.Project>}
 */
proto.GITLAB_DASH_API.ProjectList.prototype.getProjectsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Project, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Project>} value */
proto.GITLAB_DASH_API.ProjectList.prototype.setProjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Project=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.ProjectList.prototype.addProjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.Project, opt_index);
};


proto.GITLAB_DASH_API.ProjectList.prototype.clearProjectsList = function() {
  this.setProjectsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.Issue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.Issue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.Issue.displayName = 'proto.GITLAB_DASH_API.Issue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.Issue.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.Issue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.Issue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Issue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: (f = msg.getProject()) && proto.GITLAB_DASH_API.Project.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authorId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    webUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    closedAt: (f = msg.getClosedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.Issue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.Issue;
  return proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.Issue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.GITLAB_DASH_API.Project;
      reader.readMessage(value,proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAuthorId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setClosedAt(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.Issue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.Issue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GITLAB_DASH_API.Project.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthorId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getClosedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.Issue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Issue.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Project project = 2;
 * @return {?proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.Issue.prototype.getProject = function() {
  return /** @type{?proto.GITLAB_DASH_API.Project} */ (
    jspb.Message.getWrapperField(this, proto.GITLAB_DASH_API.Project, 2));
};


/** @param {?proto.GITLAB_DASH_API.Project|undefined} value */
proto.GITLAB_DASH_API.Issue.prototype.setProject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GITLAB_DASH_API.Issue.prototype.clearProject = function() {
  this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Issue.prototype.hasProject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.GITLAB_DASH_API.Issue.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Issue.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.Issue.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Issue.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.GITLAB_DASH_API.Issue.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Issue.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 author_id = 6;
 * @return {number}
 */
proto.GITLAB_DASH_API.Issue.prototype.getAuthorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Issue.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string web_url = 7;
 * @return {string}
 */
proto.GITLAB_DASH_API.Issue.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Issue.prototype.setWebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp closed_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.Issue.prototype.getClosedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.Issue.prototype.setClosedAt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.GITLAB_DASH_API.Issue.prototype.clearClosedAt = function() {
  this.setClosedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Issue.prototype.hasClosedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.Issue.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.Issue.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GITLAB_DASH_API.Issue.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Issue.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.IssueList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.IssueList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.IssueList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.IssueList.displayName = 'proto.GITLAB_DASH_API.IssueList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.IssueList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.IssueList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.IssueList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.IssueList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.IssueList.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuesList: jspb.Message.toObjectList(msg.getIssuesList(),
    proto.GITLAB_DASH_API.Issue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.IssueList}
 */
proto.GITLAB_DASH_API.IssueList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.IssueList;
  return proto.GITLAB_DASH_API.IssueList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.IssueList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.IssueList}
 */
proto.GITLAB_DASH_API.IssueList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.Issue;
      reader.readMessage(value,proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader);
      msg.addIssues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.IssueList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.IssueList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.IssueList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.IssueList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Issue issues = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.Issue>}
 */
proto.GITLAB_DASH_API.IssueList.prototype.getIssuesList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Issue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Issue, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Issue>} value */
proto.GITLAB_DASH_API.IssueList.prototype.setIssuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Issue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.IssueList.prototype.addIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.Issue, opt_index);
};


proto.GITLAB_DASH_API.IssueList.prototype.clearIssuesList = function() {
  this.setIssuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.MergeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.MergeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.MergeRequest.displayName = 'proto.GITLAB_DASH_API.MergeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.MergeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.MergeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.MergeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: (f = msg.getProject()) && proto.GITLAB_DASH_API.Project.toObject(includeInstance, f),
    issue: (f = msg.getIssue()) && proto.GITLAB_DASH_API.Issue.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, ""),
    authorId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    webUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mergedAt: (f = msg.getMergedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.MergeRequest}
 */
proto.GITLAB_DASH_API.MergeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.MergeRequest;
  return proto.GITLAB_DASH_API.MergeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.MergeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.MergeRequest}
 */
proto.GITLAB_DASH_API.MergeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.GITLAB_DASH_API.Project;
      reader.readMessage(value,proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.GITLAB_DASH_API.Issue;
      reader.readMessage(value,proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader);
      msg.setIssue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAuthorId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMergedAt(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.MergeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.MergeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.MergeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GITLAB_DASH_API.Project.serializeBinaryToWriter
    );
  }
  f = message.getIssue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAuthorId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMergedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Project project = 2;
 * @return {?proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getProject = function() {
  return /** @type{?proto.GITLAB_DASH_API.Project} */ (
    jspb.Message.getWrapperField(this, proto.GITLAB_DASH_API.Project, 2));
};


/** @param {?proto.GITLAB_DASH_API.Project|undefined} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setProject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GITLAB_DASH_API.MergeRequest.prototype.clearProject = function() {
  this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.hasProject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Issue issue = 3;
 * @return {?proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getIssue = function() {
  return /** @type{?proto.GITLAB_DASH_API.Issue} */ (
    jspb.Message.getWrapperField(this, proto.GITLAB_DASH_API.Issue, 3));
};


/** @param {?proto.GITLAB_DASH_API.Issue|undefined} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setIssue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GITLAB_DASH_API.MergeRequest.prototype.clearIssue = function() {
  this.setIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.hasIssue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 author_id = 7;
 * @return {number}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getAuthorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string web_url = 8;
 * @return {string}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setWebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp merged_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getMergedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setMergedAt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GITLAB_DASH_API.MergeRequest.prototype.clearMergedAt = function() {
  this.setMergedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.hasMergedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.MergeRequest.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.GITLAB_DASH_API.MergeRequest.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.MergeRequest.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.MergeRequestList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.MergeRequestList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.MergeRequestList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.MergeRequestList.displayName = 'proto.GITLAB_DASH_API.MergeRequestList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.MergeRequestList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.MergeRequestList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.MergeRequestList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.MergeRequestList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.MergeRequestList.toObject = function(includeInstance, msg) {
  var f, obj = {
    mergeRequestsList: jspb.Message.toObjectList(msg.getMergeRequestsList(),
    proto.GITLAB_DASH_API.MergeRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.MergeRequestList}
 */
proto.GITLAB_DASH_API.MergeRequestList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.MergeRequestList;
  return proto.GITLAB_DASH_API.MergeRequestList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.MergeRequestList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.MergeRequestList}
 */
proto.GITLAB_DASH_API.MergeRequestList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.MergeRequest;
      reader.readMessage(value,proto.GITLAB_DASH_API.MergeRequest.deserializeBinaryFromReader);
      msg.addMergeRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.MergeRequestList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.MergeRequestList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.MergeRequestList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.MergeRequestList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMergeRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.MergeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MergeRequest merge_requests = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.MergeRequest>}
 */
proto.GITLAB_DASH_API.MergeRequestList.prototype.getMergeRequestsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.MergeRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.MergeRequest, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.MergeRequest>} value */
proto.GITLAB_DASH_API.MergeRequestList.prototype.setMergeRequestsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.MergeRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.MergeRequest}
 */
proto.GITLAB_DASH_API.MergeRequestList.prototype.addMergeRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.MergeRequest, opt_index);
};


proto.GITLAB_DASH_API.MergeRequestList.prototype.clearMergeRequestsList = function() {
  this.setMergeRequestsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.Commit.displayName = 'proto.GITLAB_DASH_API.Commit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.Commit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: (f = msg.getProject()) && proto.GITLAB_DASH_API.Project.toObject(includeInstance, f),
    issue: (f = msg.getIssue()) && proto.GITLAB_DASH_API.Issue.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    committerId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    committedDate: (f = msg.getCommittedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.Commit}
 */
proto.GITLAB_DASH_API.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.Commit;
  return proto.GITLAB_DASH_API.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.Commit}
 */
proto.GITLAB_DASH_API.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.GITLAB_DASH_API.Project;
      reader.readMessage(value,proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 3:
      var value = new proto.GITLAB_DASH_API.Issue;
      reader.readMessage(value,proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader);
      msg.setIssue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommitterId(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCommittedDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.Commit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.Commit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Commit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GITLAB_DASH_API.Project.serializeBinaryToWriter
    );
  }
  f = message.getIssue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCommitterId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCommittedDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.GITLAB_DASH_API.Commit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Commit.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Project project = 2;
 * @return {?proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.Commit.prototype.getProject = function() {
  return /** @type{?proto.GITLAB_DASH_API.Project} */ (
    jspb.Message.getWrapperField(this, proto.GITLAB_DASH_API.Project, 2));
};


/** @param {?proto.GITLAB_DASH_API.Project|undefined} value */
proto.GITLAB_DASH_API.Commit.prototype.setProject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GITLAB_DASH_API.Commit.prototype.clearProject = function() {
  this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Commit.prototype.hasProject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Issue issue = 3;
 * @return {?proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.Commit.prototype.getIssue = function() {
  return /** @type{?proto.GITLAB_DASH_API.Issue} */ (
    jspb.Message.getWrapperField(this, proto.GITLAB_DASH_API.Issue, 3));
};


/** @param {?proto.GITLAB_DASH_API.Issue|undefined} value */
proto.GITLAB_DASH_API.Commit.prototype.setIssue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GITLAB_DASH_API.Commit.prototype.clearIssue = function() {
  this.setIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Commit.prototype.hasIssue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.Commit.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Commit.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 committer_id = 5;
 * @return {number}
 */
proto.GITLAB_DASH_API.Commit.prototype.getCommitterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Commit.prototype.setCommitterId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp committed_date = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.Commit.prototype.getCommittedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.Commit.prototype.setCommittedDate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.GITLAB_DASH_API.Commit.prototype.clearCommittedDate = function() {
  this.setCommittedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Commit.prototype.hasCommittedDate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string message = 7;
 * @return {string}
 */
proto.GITLAB_DASH_API.Commit.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Commit.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.Commit.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.Commit.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.GITLAB_DASH_API.Commit.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.Commit.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.CommitList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.CommitList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.CommitList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.CommitList.displayName = 'proto.GITLAB_DASH_API.CommitList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.CommitList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.CommitList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.CommitList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.CommitList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.CommitList.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitsList: jspb.Message.toObjectList(msg.getCommitsList(),
    proto.GITLAB_DASH_API.Commit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.CommitList}
 */
proto.GITLAB_DASH_API.CommitList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.CommitList;
  return proto.GITLAB_DASH_API.CommitList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.CommitList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.CommitList}
 */
proto.GITLAB_DASH_API.CommitList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.Commit;
      reader.readMessage(value,proto.GITLAB_DASH_API.Commit.deserializeBinaryFromReader);
      msg.addCommits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.CommitList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.CommitList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.CommitList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.CommitList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.Commit.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Commit commits = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.Commit>}
 */
proto.GITLAB_DASH_API.CommitList.prototype.getCommitsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Commit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Commit, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Commit>} value */
proto.GITLAB_DASH_API.CommitList.prototype.setCommitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Commit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Commit}
 */
proto.GITLAB_DASH_API.CommitList.prototype.addCommits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.Commit, opt_index);
};


proto.GITLAB_DASH_API.CommitList.prototype.clearCommitsList = function() {
  this.setCommitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.User.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.User.displayName = 'proto.GITLAB_DASH_API.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.User.repeatedFields_ = [11,13,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.User.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    state: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    webUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isAdmin: jspb.Message.getFieldWithDefault(msg, 8, false),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    numberOfIssues: jspb.Message.getFieldWithDefault(msg, 10, 0),
    issuesList: jspb.Message.toObjectList(msg.getIssuesList(),
    proto.GITLAB_DASH_API.Issue.toObject, includeInstance),
    numberOfCommits: jspb.Message.getFieldWithDefault(msg, 12, 0),
    commitsList: jspb.Message.toObjectList(msg.getCommitsList(),
    proto.GITLAB_DASH_API.Commit.toObject, includeInstance),
    numberOfMergeRequests: jspb.Message.getFieldWithDefault(msg, 14, 0),
    mergeRequestsList: jspb.Message.toObjectList(msg.getMergeRequestsList(),
    proto.GITLAB_DASH_API.MergeRequest.toObject, includeInstance),
    projectsList: jspb.Message.toObjectList(msg.getProjectsList(),
    proto.GITLAB_DASH_API.Project.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.User}
 */
proto.GITLAB_DASH_API.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.User;
  return proto.GITLAB_DASH_API.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.User}
 */
proto.GITLAB_DASH_API.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAdmin(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberOfIssues(value);
      break;
    case 11:
      var value = new proto.GITLAB_DASH_API.Issue;
      reader.readMessage(value,proto.GITLAB_DASH_API.Issue.deserializeBinaryFromReader);
      msg.addIssues(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberOfCommits(value);
      break;
    case 13:
      var value = new proto.GITLAB_DASH_API.Commit;
      reader.readMessage(value,proto.GITLAB_DASH_API.Commit.deserializeBinaryFromReader);
      msg.addCommits(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberOfMergeRequests(value);
      break;
    case 15:
      var value = new proto.GITLAB_DASH_API.MergeRequest;
      reader.readMessage(value,proto.GITLAB_DASH_API.MergeRequest.deserializeBinaryFromReader);
      msg.addMergeRequests(value);
      break;
    case 16:
      var value = new proto.GITLAB_DASH_API.Project;
      reader.readMessage(value,proto.GITLAB_DASH_API.Project.deserializeBinaryFromReader);
      msg.addProjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsAdmin();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNumberOfIssues();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.GITLAB_DASH_API.Issue.serializeBinaryToWriter
    );
  }
  f = message.getNumberOfCommits();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getCommitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.GITLAB_DASH_API.Commit.serializeBinaryToWriter
    );
  }
  f = message.getNumberOfMergeRequests();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getMergeRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.GITLAB_DASH_API.MergeRequest.serializeBinaryToWriter
    );
  }
  f = message.getProjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.GITLAB_DASH_API.Project.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.User.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string state = 5;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string avatar_url = 6;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setAvatarUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string web_url = 7;
 * @return {string}
 */
proto.GITLAB_DASH_API.User.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.User.prototype.setWebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_admin = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GITLAB_DASH_API.User.prototype.getIsAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.GITLAB_DASH_API.User.prototype.setIsAdmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GITLAB_DASH_API.User.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.GITLAB_DASH_API.User.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.GITLAB_DASH_API.User.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GITLAB_DASH_API.User.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 number_of_issues = 10;
 * @return {number}
 */
proto.GITLAB_DASH_API.User.prototype.getNumberOfIssues = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.User.prototype.setNumberOfIssues = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated Issue issues = 11;
 * @return {!Array<!proto.GITLAB_DASH_API.Issue>}
 */
proto.GITLAB_DASH_API.User.prototype.getIssuesList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Issue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Issue, 11));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Issue>} value */
proto.GITLAB_DASH_API.User.prototype.setIssuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Issue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Issue}
 */
proto.GITLAB_DASH_API.User.prototype.addIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.GITLAB_DASH_API.Issue, opt_index);
};


proto.GITLAB_DASH_API.User.prototype.clearIssuesList = function() {
  this.setIssuesList([]);
};


/**
 * optional int32 number_of_commits = 12;
 * @return {number}
 */
proto.GITLAB_DASH_API.User.prototype.getNumberOfCommits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.User.prototype.setNumberOfCommits = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated Commit commits = 13;
 * @return {!Array<!proto.GITLAB_DASH_API.Commit>}
 */
proto.GITLAB_DASH_API.User.prototype.getCommitsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Commit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Commit, 13));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Commit>} value */
proto.GITLAB_DASH_API.User.prototype.setCommitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Commit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Commit}
 */
proto.GITLAB_DASH_API.User.prototype.addCommits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.GITLAB_DASH_API.Commit, opt_index);
};


proto.GITLAB_DASH_API.User.prototype.clearCommitsList = function() {
  this.setCommitsList([]);
};


/**
 * optional int32 number_of_merge_requests = 14;
 * @return {number}
 */
proto.GITLAB_DASH_API.User.prototype.getNumberOfMergeRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.User.prototype.setNumberOfMergeRequests = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated MergeRequest merge_requests = 15;
 * @return {!Array<!proto.GITLAB_DASH_API.MergeRequest>}
 */
proto.GITLAB_DASH_API.User.prototype.getMergeRequestsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.MergeRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.MergeRequest, 15));
};


/** @param {!Array<!proto.GITLAB_DASH_API.MergeRequest>} value */
proto.GITLAB_DASH_API.User.prototype.setMergeRequestsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.MergeRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.MergeRequest}
 */
proto.GITLAB_DASH_API.User.prototype.addMergeRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.GITLAB_DASH_API.MergeRequest, opt_index);
};


proto.GITLAB_DASH_API.User.prototype.clearMergeRequestsList = function() {
  this.setMergeRequestsList([]);
};


/**
 * repeated Project projects = 16;
 * @return {!Array<!proto.GITLAB_DASH_API.Project>}
 */
proto.GITLAB_DASH_API.User.prototype.getProjectsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Project, 16));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Project>} value */
proto.GITLAB_DASH_API.User.prototype.setProjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Project=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Project}
 */
proto.GITLAB_DASH_API.User.prototype.addProjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.GITLAB_DASH_API.Project, opt_index);
};


proto.GITLAB_DASH_API.User.prototype.clearProjectsList = function() {
  this.setProjectsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.UserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.UserList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.UserList.displayName = 'proto.GITLAB_DASH_API.UserList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.UserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.UserList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.UserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.UserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.GITLAB_DASH_API.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.UserList}
 */
proto.GITLAB_DASH_API.UserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.UserList;
  return proto.GITLAB_DASH_API.UserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.UserList}
 */
proto.GITLAB_DASH_API.UserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.User;
      reader.readMessage(value,proto.GITLAB_DASH_API.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.UserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.UserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.UserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.User>}
 */
proto.GITLAB_DASH_API.UserList.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.User, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.User>} value */
proto.GITLAB_DASH_API.UserList.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.User}
 */
proto.GITLAB_DASH_API.UserList.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.User, opt_index);
};


proto.GITLAB_DASH_API.UserList.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.Group.displayName = 'proto.GITLAB_DASH_API.Group';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    visibility: jspb.Message.getFieldWithDefault(msg, 4, ""),
    webUrl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.Group}
 */
proto.GITLAB_DASH_API.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.Group;
  return proto.GITLAB_DASH_API.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.Group}
 */
proto.GITLAB_DASH_API.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisibility(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVisibility();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.Group.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Group.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GITLAB_DASH_API.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Group.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.GITLAB_DASH_API.Group.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Group.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string visibility = 4;
 * @return {string}
 */
proto.GITLAB_DASH_API.Group.prototype.getVisibility = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Group.prototype.setVisibility = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string web_url = 5;
 * @return {string}
 */
proto.GITLAB_DASH_API.Group.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Group.prototype.setWebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.GroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.GroupList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.GroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.GroupList.displayName = 'proto.GITLAB_DASH_API.GroupList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.GroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.GroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.GroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.GroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.GroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.GITLAB_DASH_API.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.GroupList}
 */
proto.GITLAB_DASH_API.GroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.GroupList;
  return proto.GITLAB_DASH_API.GroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.GroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.GroupList}
 */
proto.GITLAB_DASH_API.GroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.Group;
      reader.readMessage(value,proto.GITLAB_DASH_API.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.GroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.GroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.GroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.GroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.Group.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Group groups = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.Group>}
 */
proto.GITLAB_DASH_API.GroupList.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Group, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Group>} value */
proto.GITLAB_DASH_API.GroupList.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Group}
 */
proto.GITLAB_DASH_API.GroupList.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.Group, opt_index);
};


proto.GITLAB_DASH_API.GroupList.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.Branch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GITLAB_DASH_API.Branch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.Branch.displayName = 'proto.GITLAB_DASH_API.Branch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.Branch.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.Branch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.Branch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Branch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    canPush: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.Branch}
 */
proto.GITLAB_DASH_API.Branch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.Branch;
  return proto.GITLAB_DASH_API.Branch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.Branch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.Branch}
 */
proto.GITLAB_DASH_API.Branch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanPush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.Branch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.Branch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.Branch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.Branch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCanPush();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.GITLAB_DASH_API.Branch.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GITLAB_DASH_API.Branch.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GITLAB_DASH_API.Branch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GITLAB_DASH_API.Branch.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool can_push = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GITLAB_DASH_API.Branch.prototype.getCanPush = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.GITLAB_DASH_API.Branch.prototype.setCanPush = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GITLAB_DASH_API.BranchList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GITLAB_DASH_API.BranchList.repeatedFields_, null);
};
goog.inherits(proto.GITLAB_DASH_API.BranchList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GITLAB_DASH_API.BranchList.displayName = 'proto.GITLAB_DASH_API.BranchList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GITLAB_DASH_API.BranchList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GITLAB_DASH_API.BranchList.prototype.toObject = function(opt_includeInstance) {
  return proto.GITLAB_DASH_API.BranchList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GITLAB_DASH_API.BranchList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.BranchList.toObject = function(includeInstance, msg) {
  var f, obj = {
    branchesList: jspb.Message.toObjectList(msg.getBranchesList(),
    proto.GITLAB_DASH_API.Branch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GITLAB_DASH_API.BranchList}
 */
proto.GITLAB_DASH_API.BranchList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GITLAB_DASH_API.BranchList;
  return proto.GITLAB_DASH_API.BranchList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GITLAB_DASH_API.BranchList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GITLAB_DASH_API.BranchList}
 */
proto.GITLAB_DASH_API.BranchList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GITLAB_DASH_API.Branch;
      reader.readMessage(value,proto.GITLAB_DASH_API.Branch.deserializeBinaryFromReader);
      msg.addBranches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GITLAB_DASH_API.BranchList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GITLAB_DASH_API.BranchList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GITLAB_DASH_API.BranchList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GITLAB_DASH_API.BranchList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBranchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GITLAB_DASH_API.Branch.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Branch branches = 1;
 * @return {!Array<!proto.GITLAB_DASH_API.Branch>}
 */
proto.GITLAB_DASH_API.BranchList.prototype.getBranchesList = function() {
  return /** @type{!Array<!proto.GITLAB_DASH_API.Branch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GITLAB_DASH_API.Branch, 1));
};


/** @param {!Array<!proto.GITLAB_DASH_API.Branch>} value */
proto.GITLAB_DASH_API.BranchList.prototype.setBranchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GITLAB_DASH_API.Branch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GITLAB_DASH_API.Branch}
 */
proto.GITLAB_DASH_API.BranchList.prototype.addBranches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GITLAB_DASH_API.Branch, opt_index);
};


proto.GITLAB_DASH_API.BranchList.prototype.clearBranchesList = function() {
  this.setBranchesList([]);
};


goog.object.extend(exports, proto.GITLAB_DASH_API);
